---
swagger: "2.0"
info:
  description: "A simple application that helps manage a library and its processes\
    \ like stocking, tracking and renting books.\n"
  version: "1.0.0"
  title: "Hello-Books API Documentation"
  termsOfService: "https://hellobooks.herokuapp.com"
  contact:
    email: "temitayo.fadojutimi@andela.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "hellobooks.herokuapp.com"
basePath: "/api/v1"
schemes:
- "http"
paths:
  /:
    post:
      tags:
      - "Index"
      summary: "Index endpoint"
      operationId: "index"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Welcome message"
      x-swagger-router-controller: "Index"
  /users/signup:
    post:
      tags:
      - "Account creation and Authentication"
      summary: "Add a new user"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/body"
      responses:
        200:
          description: "User successfully created"
        400:
          description: "Validation error"
        500:
          description: "Server error"
      x-swagger-router-controller: "AccountCreationAndAuthentication"
  /users/signin:
    post:
      tags:
      - "Account creation and Authentication"
      summary: "Log a user in"
      operationId: "logUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "requestBody"
        description: "User object that needs to be logged in"
        required: true
        schema:
          $ref: "#/definitions/requestBody"
      responses:
        200:
          description: "User successfully logged in"
        400:
          description: "Validation error"
        500:
          description: "Server error"
      x-swagger-router-controller: "AccountCreationAndAuthentication"
  /books:
    post:
      tags:
      - "Books"
      summary: "Add a book"
      operationId: "addBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - in: "body"
        name: "requestBody"
        description: "Book object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "Books"
  /books/{bookId}:
    put:
      tags:
      - "Books"
      summary: "Edit a book"
      operationId: "editBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - in: "body"
        name: "requestBody"
        description: "Book object that needs to be edited"
        required: true
        schema:
          $ref: "#/definitions/Book"
      - name: "bookId"
        in: "path"
        description: "ID of the Book"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "Books"
  /books/categories:
    post:
      tags:
      - "Book Categories"
      summary: "Add a category"
      operationId: "addBookCategory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - in: "body"
        name: "requestBody"
        description: "Category object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/BookCategories"
      responses:
        201:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "BookCategories"
  /books/categories/{categoryId}:
    put:
      tags:
      - "Book Categories"
      summary: "Edit a category"
      operationId: "editBookCategory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - in: "body"
        name: "requestBody"
        description: "Category object that needs to be edited"
        required: true
        schema:
          $ref: "#/definitions/BookCategories"
      - name: "categoryId"
        in: "path"
        description: "ID of the Category"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "BookCategories"
  /books/categories/:
    get:
      tags:
      - "Book Categories"
      summary: "Get book categories"
      operationId: "getBookCategory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "BookCategories"
  /books/categories/{categoryId}/:
    delete:
      tags:
      - "Book Categories"
      summary: "Delete a category"
      operationId: "deleteBookCategory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - name: "categoryId"
        in: "path"
        description: "ID of the Category to be deleted"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "BookCategories"
  /books/stocks:
    post:
      tags:
      - "Stock Manager"
      summary: "Stock a book"
      operationId: "addBookStock"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - in: "body"
        name: "requestBody"
        description: "Stock object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/StockManager"
      responses:
        201:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "StockManager"
  /books/stocks/:
    get:
      tags:
      - "Stock Manager"
      summary: "Get books stocks"
      operationId: "getBookStocks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      responses:
        201:
          description: "Success"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "StockManager"
  /books/stocks/{stockId}:
    delete:
      tags:
      - "Stock Manager"
      summary: "Delete a book stock"
      operationId: "deleteBookStock"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - name: "stockId"
        in: "path"
        description: "Stock id to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "StockManager"
  /users/{userId}/books:
    post:
      tags:
      - "User - Book actions"
      summary: "Borrow a book"
      operationId: "borrowBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - name: "book_id"
        in: "query"
        description: "Borrow book object that needs to be created"
        required: true
        type: "integer"
      - name: "userId"
        in: "path"
        description: "User id of the user making the request"
        required: true
        type: "integer"
      - in: "body"
        name: "requestBody"
        description: "Borrow book object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/BorrowBook"
      responses:
        201:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "UserBookActions"
  /users/{userId}/books/{borrowedBookId}:
    put:
      tags:
      - "User - Book actions"
      summary: "Return borrowed book"
      operationId: "returnBorrowedBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "Return borrowed book ID"
        required: true
        type: "integer"
      - name: "userId"
        in: "path"
        description: "User id of the user making the request"
        required: true
        type: "integer"
      - name: "borrowedBookId"
        in: "path"
        description: "Borrowed book id the user wants to return"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "UserBookActions"
  /users/{userId}/books/:
    get:
      tags:
      - "User - Book actions"
      summary: "Get borrowed books"
      operationId: "getBorrowedBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authenticate-token"
        in: "header"
        description: "A JWT token for authentication"
        required: true
        type: "string"
      - name: "returned"
        in: "query"
        description: "Returned book status"
        required: true
        type: "boolean"
      - name: "userId"
        in: "path"
        description: "User id of the user making the request"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Validation error"
        401:
          description: "Authentication error"
        403:
          description: "Authentication error"
        500:
          description: "Server error"
      x-swagger-router-controller: "UserBookActions"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userGroup:
        type: "string"
        description: "User group; admin or user"
      userRank:
        type: "string"
      isValidated:
        type: "integer"
      isActive:
        type: "integer"
      key:
        type: "string"
      updatedAt:
        type: "string"
      createdAt:
        type: "string"
  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      description:
        type: "string"
      author:
        type: "string"
      bookURL:
        type: "string"
      ISBN:
        type: "string"
      bookCategoryId:
        type: "integer"
      coverPhotoPath:
        type: "integer"
      documentPath:
        type: "string"
      userId:
        type: "integer"
      stock_quantity:
        type: "integer"
      stock_record_date:
        type: "string"
  BookCategories:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  StockManager:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
      record_date:
        type: "string"
      book_id:
        type: "integer"
  BorrowBook:
    type: "object"
    properties:
      book_id:
        type: "integer"
      return_date:
        type: "string"
  body:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  requestBody:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
